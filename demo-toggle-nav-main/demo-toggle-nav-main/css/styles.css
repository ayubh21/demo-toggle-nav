body {
    background-color: #192f5e;
    font-family: sans-serif;
    color: #f5f5f5;
}

.flex-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/*  for typography use global style selectors */
 p {
    font-size: #d5e294;
    border-bottom: 2px solid #d5e294;
    padding-bottom: 1rem;
    font-size: 1.777rem;
}

h2 {
    color: #fff;
    font-size: 3.157rem;
    margin-bottom: 2rem;

}
/* Step 1. Style the default nav in its showing state,
style the layout and links for how they will look when visible*/

header {
    background-color: #fff;
    padding: 1rem;
}


header a {
    text-decoration: none;
    color: #3f3f3f;
    display: block;
}

.menu a:hover,
.menu a:active {
    background-color: gainsboro;
    border-radius: 4px;
}

.menu li {
    line-height: 40px;
}

.menu {
    display: flex;
    flex-direction: column;
    text-align: center;
}

button {
    background-color: #fff;
    border: none

}

/* Step 2. Now let's hide the menu. Once its hidden, this is the default loading stage.
If using display: none -- that property cannot be transitioned. */

header nav {
    /* display: none; */
                    /* height won't transition max-height will */
    transition: max-height 1s ease-in-out;
    position: absolute;
    background-color: #fff;
 /* Let's position thus absolute and this will disappear from the document flow
    and it will not leave a space where it was in relation ot the viewport, because we are not positioning in relation to the parent container (parent container == position relative */
    top: 4.6875rem;
    left: 0;
    width: auto;
    overflow: hidden;
    max-height: 0;

}
/* 
Create a special class that will show the menu
This class name will only exist in the CSS file for now, The JavaScript will add
this class to the markup for us */

.show-nav {
   
    max-height: 16rem;
}

section {
    padding: 3.125rem;
    text-align: center;
    text-transform: uppercase;
}

/* step 4. add a mediq query and show the nav by default for a horizontal screen layout */

@media screen and (min-width:43.75rem) {
    button.toggle-btn {
        display: none;
    }

    /* show the nav by default */

    header nav {
        max-height: 90px;
        overflow: visible;
        position: unset; /* its original or default position which in this case is static. */
    }

    .inner-container {
        display: flex;
        justify-content: space-between;
        max-width: 75rem; /* fluid-to-fixed width container */
        margin: 0 auto;
        align-items: center;

    }
 
    .menu {
         /* If the element is a flex-container in our generic css we do not have to re-display flex in out larger screen layouts */
        flex-direction: row;
        gap: 1rem;
        justify-content: flex-end;
    }

    .menu a {
        padding: 0 0.5rem;
    }
}